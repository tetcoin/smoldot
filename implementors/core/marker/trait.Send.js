(function() {var implementors = {};
implementors["full_node"] = [{"text":"impl Send for CliOptions","synthetic":true,"types":[]},{"text":"impl Send for CliChain","synthetic":true,"types":[]},{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl Send for ColorChoiceParseError","synthetic":true,"types":[]},{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl Send for OutputParseError","synthetic":true,"types":[]},{"text":"impl Send for NodeKey","synthetic":true,"types":[]},{"text":"impl Send for NodeKeyParseError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WithBuffers&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ChainConfig","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for NetworkService","synthetic":true,"types":[]},{"text":"impl Send for Guarded","synthetic":true,"types":[]},{"text":"impl Send for InitError","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestId","synthetic":true,"types":[]},{"text":"impl Send for SyncState","synthetic":true,"types":[]},{"text":"impl Send for SyncService","synthetic":true,"types":[]},{"text":"impl Send for ToBackground","synthetic":true,"types":[]},{"text":"impl Send for FromBackground","synthetic":true,"types":[]},{"text":"impl Send for ToDatabase","synthetic":true,"types":[]}];
implementors["smoldot"] = [{"text":"impl&lt;'a, TLocAuth&gt; Send for Config&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SlotClaim","synthetic":true,"types":[]},{"text":"impl&lt;'a, TLocAuth&gt; Send for Config&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TLocAuth&gt; Send for ConfigConsensus&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for BuilderAuthoring","synthetic":true,"types":[]},{"text":"impl Send for WaitSlot","synthetic":true,"types":[]},{"text":"impl Send for AuthoringStart","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuthoringStartConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ApplyExtrinsic","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for PrefixKeys","synthetic":true,"types":[]},{"text":"impl Send for NextKey","synthetic":true,"types":[]},{"text":"impl Send for Seal","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ConfigPreRuntime&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BlockBuild","synthetic":true,"types":[]},{"text":"impl Send for InherentExtrinsics","synthetic":true,"types":[]},{"text":"impl Send for InherentData","synthetic":true,"types":[]},{"text":"impl Send for InherentDataConsensus","synthetic":true,"types":[]},{"text":"impl Send for ApplyExtrinsic","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for PrefixKeys","synthetic":true,"types":[]},{"text":"impl Send for NextKey","synthetic":true,"types":[]},{"text":"impl Send for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl Send for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl Send for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl Send for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; Send for JustificationApply&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for JustificationVerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SetFinalizedBlockIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SetFinalizedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BodyVerifyStep1&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BodyVerifyRuntimeRequired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BodyVerifyStep2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StorageGet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StoragePrefixKeys&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StorageNextKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RuntimeCompilation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; Send for HeaderVerifySuccess&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; Send for HeaderInsert&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HeaderVerifyError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BodyInsert&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NonFinalizedTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BlockAccess&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AuraGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl Send for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl Send for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl Send for BabeGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl Send for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl Send for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl Send for BabeEpochToFetch","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Query","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for NextKey","synthetic":true,"types":[]},{"text":"impl Send for ChainInformation","synthetic":true,"types":[]},{"text":"impl Send for ChainInformationConsensus","synthetic":true,"types":[]},{"text":"impl Send for BabeEpochInformation","synthetic":true,"types":[]},{"text":"impl Send for ChainInformationFinality","synthetic":true,"types":[]},{"text":"impl Send for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl Send for FinalizedScheduledChange","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChainInformationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChainInformationConsensusRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeEpochInformationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChainInformationFinalityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ForkTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for PruneAncestorsIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PrunedNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeIndex","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for RequestId","synthetic":true,"types":[]},{"text":"impl Send for SourceId","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; Send for OptimisticSync&lt;TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TBl&gt; Send for Block&lt;TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TBl&gt; Send for RequestSuccessBlock&lt;TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; Send for ProcessOne&lt;TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; Send for StorageGet&lt;TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; Send for StoragePrefixKeys&lt;TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; Send for StorageNextKey&lt;TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TSrc, TBl&gt; Send for RequestAction&lt;'a, TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TSrc, TBl&gt; Send for Start&lt;'a, TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TSrc&gt; Send for FinishRequestOutcome&lt;'a, TSrc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RequestFail","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TBl&gt; Send for RequestsDrain&lt;'a, TRq, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResetCause","synthetic":true,"types":[]},{"text":"impl Send for LightSyncState","synthetic":true,"types":[]},{"text":"impl Send for ChainSpec","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for CorruptedError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ConfigTy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DatabaseOpen","synthetic":true,"types":[]},{"text":"impl Send for DatabaseEmpty","synthetic":true,"types":[]},{"text":"impl Send for SledFullDatabase","synthetic":true,"types":[]},{"text":"impl Send for VarLenBytes","synthetic":true,"types":[]},{"text":"impl Send for AccessError","synthetic":true,"types":[]},{"text":"impl Send for SledError","synthetic":true,"types":[]},{"text":"impl Send for InsertError","synthetic":true,"types":[]},{"text":"impl Send for SetFinalizedError","synthetic":true,"types":[]},{"text":"impl Send for FinalizedAccessError","synthetic":true,"types":[]},{"text":"impl Send for CorruptedError","synthetic":true,"types":[]},{"text":"impl Send for HostVmPrototype","synthetic":true,"types":[]},{"text":"impl Send for HostVm","synthetic":true,"types":[]},{"text":"impl Send for ReadyToRun","synthetic":true,"types":[]},{"text":"impl Send for Finished","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageGet","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageSet","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageAppend","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageClearPrefix","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageRoot","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageChangesRoot","synthetic":true,"types":[]},{"text":"impl Send for ExternalStorageNextKey","synthetic":true,"types":[]},{"text":"impl Send for CallRuntimeVersion","synthetic":true,"types":[]},{"text":"impl Send for ExternalOffchainStorageSet","synthetic":true,"types":[]},{"text":"impl Send for LogEmit","synthetic":true,"types":[]},{"text":"impl Send for StartStorageTransaction","synthetic":true,"types":[]},{"text":"impl Send for EndStorageTransaction","synthetic":true,"types":[]},{"text":"impl Send for NewErr","synthetic":true,"types":[]},{"text":"impl Send for StartErr","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, TParams&gt; Send for Config&lt;'a, TParams&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TParams: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for SuccessVirtualMachine","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RuntimeHostVm","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for NextKey","synthetic":true,"types":[]},{"text":"impl&lt;'a, TParams&gt; Send for Config&lt;'a, TParams&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TParams: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for SuccessVirtualMachine","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RuntimeHostVm","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for PrefixKeys","synthetic":true,"types":[]},{"text":"impl Send for NextKey","synthetic":true,"types":[]},{"text":"impl Send for VirtualMachinePrototype","synthetic":true,"types":[]},{"text":"impl Send for VirtualMachine","synthetic":true,"types":[]},{"text":"impl Send for ExecHint","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for WasmValue","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedTypeError","synthetic":true,"types":[]},{"text":"impl Send for ExecOutcome","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for NewErr","synthetic":true,"types":[]},{"text":"impl Send for StartErr","synthetic":true,"types":[]},{"text":"impl Send for ModuleError","synthetic":true,"types":[]},{"text":"impl Send for OutOfBoundsError","synthetic":true,"types":[]},{"text":"impl Send for RunErr","synthetic":true,"types":[]},{"text":"impl Send for GlobalValueErr","synthetic":true,"types":[]},{"text":"impl Send for CoreVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CoreVersionRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GrandpaGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl Send for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl Send for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl Send for Verifier","synthetic":true,"types":[]},{"text":"impl Send for Next","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for JustificationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Justification","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrecommitsRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrecommitsRefIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrecommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Precommit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VotesAncestriesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Config&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuraConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AuraConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuraAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuraAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AuraAuthority","synthetic":true,"types":[]},{"text":"impl Send for AuraPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabeConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeNextEpochRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabeNextEpoch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabeAuthority","synthetic":true,"types":[]},{"text":"impl Send for BabeNextConfig","synthetic":true,"types":[]},{"text":"impl Send for BabeAllowedSlots","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabePreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabePreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabePrimaryPreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabePrimaryPreDigest","synthetic":true,"types":[]},{"text":"impl Send for BabeSecondaryPlainPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BabeSecondaryVRFPreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BabeSecondaryVRFPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GrandpaConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GrandpaConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GrandpaScheduledChangeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GrandpaScheduledChange","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GrandpaAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GrandpaAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GrandpaAuthority","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HeaderRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Seal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LogsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DigestItemRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DigestItem","synthetic":true,"types":[]},{"text":"impl Send for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl Send for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InformantLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RelayChain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HashDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for JsonRpcParseError","synthetic":true,"types":[]},{"text":"impl Send for MethodCall","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Response&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for HexString","synthetic":true,"types":[]},{"text":"impl Send for HashHexString","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for HeaderDigest","synthetic":true,"types":[]},{"text":"impl Send for RpcMethods","synthetic":true,"types":[]},{"text":"impl Send for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl Send for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl Send for SystemHealth","synthetic":true,"types":[]},{"text":"impl Send for SystemPeer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Call&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ErrorResponse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WsServer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TRqUd, TNotifUd&gt; Send for Established&lt;TNow, TRqUd, TNotifUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNotifUd: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRqUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubstreamId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TRqUd, TNotifUd&gt; Send for ReadWrite&lt;TNow, TRqUd, TNotifUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNotifUd: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRqUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRqUd, TNotifUd&gt; Send for Event&lt;TRqUd, TNotifUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNotifUd: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRqUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RequestError","synthetic":true,"types":[]},{"text":"impl Send for ConnectionPrototype","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ConfigRequestResponse","synthetic":true,"types":[]},{"text":"impl Send for ConfigNotifications","synthetic":true,"types":[]},{"text":"impl Send for Handshake","synthetic":true,"types":[]},{"text":"impl Send for HealthyHandshake","synthetic":true,"types":[]},{"text":"impl Send for NoiseKeyRequired","synthetic":true,"types":[]},{"text":"impl Send for HandshakeError","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Config&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Negotiation&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for InProgress&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for MessageOut&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoiseKey","synthetic":true,"types":[]},{"text":"impl Send for UnsignedNoiseKey","synthetic":true,"types":[]},{"text":"impl Send for Noise","synthetic":true,"types":[]},{"text":"impl Send for NoiseHandshake","synthetic":true,"types":[]},{"text":"impl Send for HandshakeInProgress","synthetic":true,"types":[]},{"text":"impl Send for HandshakeError","synthetic":true,"types":[]},{"text":"impl Send for CipherError","synthetic":true,"types":[]},{"text":"impl Send for PayloadDecodeError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Yamux&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SubstreamMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ExtractOut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubstreamId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IncomingDataOutcome&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IncomingDataDetail&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Kademlia","synthetic":true,"types":[]},{"text":"impl Send for DecodeFindNodeResponseError","synthetic":true,"types":[]},{"text":"impl Send for ProtobufDecodeError","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for FromProtobufEncodingError","synthetic":true,"types":[]},{"text":"impl Send for PeerId","synthetic":true,"types":[]},{"text":"impl Send for FromBytesError","synthetic":true,"types":[]},{"text":"impl Send for FromMultihashError","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for Bs58DecodeError","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for Peerset&lt;TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubstreamDirection","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for PendingOrConnectionMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for ConnectionMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for PendingMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for NodeMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for NodeMutKnown&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; Send for NodeMutUnknown&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TPeer&gt; Send for Config&lt;TPeer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OverlayNetwork","synthetic":true,"types":[]},{"text":"impl Send for PendingId","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TPeer, TConn&gt; Send for Network&lt;TNow, TPeer, TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StartConnect","synthetic":true,"types":[]},{"text":"impl&lt;TConn&gt; Send for Event&lt;TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TNow&gt; Send for ReadWrite&lt;TNow&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionReadyFuture","synthetic":true,"types":[]},{"text":"impl Send for ConnectionError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; Send for SubstreamOpen&lt;'a, TNow, TPeer, TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RequestError","synthetic":true,"types":[]},{"text":"impl Send for QueueNotificationError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StorageMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StorageEntryMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StorageEntryTypeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StorageHasher","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionArgumentMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ModuleConstantMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ErrorMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExtrinsicMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecodeError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for UndecodedIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BlockAnnouncesHandshakeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BlockAnnounceRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecodeBlockAnnounceError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BlockAnnouncesHandshakeDecodeError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestConfig","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestDirection","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestFields","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestConfigStart","synthetic":true,"types":[]},{"text":"impl Send for BlockData","synthetic":true,"types":[]},{"text":"impl Send for DecodeBlockResponseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GrandpaNotificationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VoteMessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnsignedPrevoteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnsignedPrecommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrimaryProposeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CommitMessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CompactCommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NeighborPacket","synthetic":true,"types":[]},{"text":"impl Send for CatchUpRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CatchUpRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrevoteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecodeGrandpaNotificationError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GrandpaWarpSyncResponseFragment","synthetic":true,"types":[]},{"text":"impl Send for DecodeGrandpaWarpSyncResponseError","synthetic":true,"types":[]},{"text":"impl&lt;TKeysIter&gt; Send for StorageProofRequestConfig&lt;TKeysIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKeysIter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeStorageProofResponseError","synthetic":true,"types":[]},{"text":"impl Send for ProtobufDecodeError","synthetic":true,"types":[]},{"text":"impl&lt;TPeer&gt; Send for Config&lt;TPeer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ChainConfig","synthetic":true,"types":[]},{"text":"impl Send for PendingId","synthetic":true,"types":[]},{"text":"impl Send for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TPeer, TConn&gt; Send for ChainNetwork&lt;TNow, TPeer, TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StartConnect","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for EncodedBlockAnnounceHandshake","synthetic":true,"types":[]},{"text":"impl Send for EncodedBlockAnnounce","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; Send for DiscoveryInsert&lt;'a, TNow, TPeer, TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TNow&gt; Send for ReadWrite&lt;TNow&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; Send for SubstreamOpen&lt;'a, TNow, TPeer, TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TNow: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DiscoveryError","synthetic":true,"types":[]},{"text":"impl Send for BlocksRequestError","synthetic":true,"types":[]},{"text":"impl Send for StorageProofRequestError","synthetic":true,"types":[]},{"text":"impl Send for GrandpaWarpSyncRequestError","synthetic":true,"types":[]},{"text":"impl Send for Nibble","synthetic":true,"types":[]},{"text":"impl Send for NibbleFromU8Error","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for BytesToNibbles&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CalculationCache","synthetic":true,"types":[]},{"text":"impl Send for RootMerkleValueCalculation","synthetic":true,"types":[]},{"text":"impl Send for AllKeys","synthetic":true,"types":[]},{"text":"impl Send for StorageValue","synthetic":true,"types":[]},{"text":"impl&lt;TChIter, TPKey, TVal&gt; Send for Config&lt;TChIter, TPKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TChIter: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPKey: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TPKey&gt; Send for NodeTy&lt;TPKey&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPKey: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Config&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;TUd&gt; Send for TrieStructure&lt;TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NodeIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd, TKIter&gt; Send for Entry&lt;'a, TUd, TKIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKIter: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for NodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for StorageNodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for Remove&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for BranchNodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd, TKIter&gt; Send for Vacant&lt;'a, TUd, TKIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKIter: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for PrepareInsert&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for PrepareInsertOne&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; Send for PrepareInsertTwo&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Trie","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAuthList&gt; Send for VerifyConfig&lt;'a, TAuthList&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAuthList: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VerifySuccess","synthetic":true,"types":[]},{"text":"impl Send for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VerifyConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for VerifySuccess","synthetic":true,"types":[]},{"text":"impl Send for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBody&gt; Send for Config&lt;'a, TBody&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBody: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ConfigConsensus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for SuccessConsensus","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Verify","synthetic":true,"types":[]},{"text":"impl Send for StorageGet","synthetic":true,"types":[]},{"text":"impl Send for StoragePrefixKeys","synthetic":true,"types":[]},{"text":"impl Send for StorageNextKey","synthetic":true,"types":[]},{"text":"impl Send for RuntimeCompilation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ConfigConsensus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Success","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["smoldot_js"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for WebSocket","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
(function() {var implementors = {};
implementors["full_node"] = [{"text":"impl RefUnwindSafe for CliOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CliChain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorChoiceParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeKeyParseError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WithBuffers&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NetworkService","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guarded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InitError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SyncService","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToBackground","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FromBackground","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToDatabase","synthetic":true,"types":[]}];
implementors["smoldot"] = [{"text":"impl&lt;'a, TLocAuth&gt; RefUnwindSafe for Config&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlotClaim","synthetic":true,"types":[]},{"text":"impl&lt;'a, TLocAuth&gt; RefUnwindSafe for Config&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TLocAuth&gt; RefUnwindSafe for ConfigConsensus&lt;'a, TLocAuth&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TLocAuth: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BuilderAuthoring","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthoringStart","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AuthoringStartConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ApplyExtrinsic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrefixKeys","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NextKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ConfigPreRuntime&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Success","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BlockBuild","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InherentExtrinsics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentDataConsensus","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ApplyExtrinsic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrefixKeys","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NextKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; RefUnwindSafe for JustificationApply&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JustificationVerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for SetFinalizedBlockIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFinalizedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BodyVerifyStep1&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BodyVerifyRuntimeRequired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BodyVerifyStep2&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StorageGet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StoragePrefixKeys&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StorageNextKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RuntimeCompilation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; RefUnwindSafe for HeaderVerifySuccess&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c, T&gt; RefUnwindSafe for HeaderInsert&lt;'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderVerifyError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BodyInsert&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NonFinalizedTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for BlockAccess&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuraGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeEpochToFetch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Query","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NextKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainInformation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainInformationConsensus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeEpochInformation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainInformationFinality","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FinalizedScheduledChange","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ChainInformationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ChainInformationConsensusRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeEpochInformationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ChainInformationFinalityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ForkTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for PruneAncestorsIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PrunedNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceId","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; !RefUnwindSafe for OptimisticSync&lt;TRq, TSrc, TBl&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TBl&gt; RefUnwindSafe for Block&lt;TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TBl&gt; RefUnwindSafe for RequestSuccessBlock&lt;TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; !RefUnwindSafe for ProcessOne&lt;TRq, TSrc, TBl&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; !RefUnwindSafe for StorageGet&lt;TRq, TSrc, TBl&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; !RefUnwindSafe for StoragePrefixKeys&lt;TRq, TSrc, TBl&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TRq, TSrc, TBl&gt; !RefUnwindSafe for StorageNextKey&lt;TRq, TSrc, TBl&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TSrc, TBl&gt; RefUnwindSafe for RequestAction&lt;'a, TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TSrc, TBl&gt; RefUnwindSafe for Start&lt;'a, TRq, TSrc, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TSrc&gt; RefUnwindSafe for FinishRequestOutcome&lt;'a, TSrc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSrc: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestFail","synthetic":true,"types":[]},{"text":"impl&lt;'a, TRq, TBl&gt; RefUnwindSafe for RequestsDrain&lt;'a, TRq, TBl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBl: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRq: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResetCause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LightSyncState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainSpec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CorruptedError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ConfigTy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DatabaseOpen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DatabaseEmpty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SledFullDatabase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarLenBytes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AccessError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SledError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InsertError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SetFinalizedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FinalizedAccessError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CorruptedError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HostVmPrototype","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HostVm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadyToRun","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Finished","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageAppend","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageClearPrefix","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageRoot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageChangesRoot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalStorageNextKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CallRuntimeVersion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternalOffchainStorageSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LogEmit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StartStorageTransaction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EndStorageTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, TParams&gt; !RefUnwindSafe for Config&lt;'a, TParams&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Success","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SuccessVirtualMachine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeHostVm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NextKey","synthetic":true,"types":[]},{"text":"impl&lt;'a, TParams&gt; !RefUnwindSafe for Config&lt;'a, TParams&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Success","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SuccessVirtualMachine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeHostVm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrefixKeys","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NextKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VirtualMachinePrototype","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VirtualMachine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedTypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecOutcome","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfBoundsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalValueErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoreVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CoreVersionRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromGenesisStorageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromVmPrototypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Verifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Next","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JustificationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Justification","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrecommitsRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrecommitsRefIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrecommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Precommit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VotesAncestriesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for Config&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuraConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuraConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuraAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuraAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuraAuthority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuraPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeNextEpochRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeNextEpoch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeAuthority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeNextConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeAllowedSlots","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabePreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabePreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabePrimaryPreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabePrimaryPreDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeSecondaryPlainPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BabeSecondaryVRFPreDigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeSecondaryVRFPreDigest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GrandpaConsensusLogRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaConsensusLog","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GrandpaScheduledChangeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaScheduledChange","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GrandpaAuthoritiesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GrandpaAuthorityRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaAuthority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HeaderRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DigestRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Seal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LogsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DigestItemRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for InformantLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RelayChain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HashDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JsonRpcParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodCall","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Response&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashHexString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemHealth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemPeer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Call&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ErrorResponse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WsServer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TRqUd, TNotifUd&gt; !RefUnwindSafe for Established&lt;TNow, TRqUd, TNotifUd&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstreamId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TRqUd, TNotifUd&gt; !RefUnwindSafe for ReadWrite&lt;TNow, TRqUd, TNotifUd&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TRqUd, TNotifUd&gt; RefUnwindSafe for Event&lt;TRqUd, TNotifUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TNotifUd: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRqUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectionPrototype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigRequestResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigNotifications","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handshake","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HealthyHandshake","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoiseKeyRequired","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeError","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Config&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Negotiation&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for InProgress&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for MessageOut&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoiseKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsignedNoiseKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Noise","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NoiseHandshake","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HandshakeInProgress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayloadDecodeError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Yamux&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for SubstreamMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ExtractOut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstreamId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IncomingDataOutcome&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IncomingDataDetail&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kademlia","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodeFindNodeResponseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufDecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromProtobufEncodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromBytesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromMultihashError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bs58DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for Peerset&lt;TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstreamDirection","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for PendingOrConnectionMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for ConnectionMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for PendingMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for NodeMut&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for NodeMutKnown&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; RefUnwindSafe for NodeMutUnknown&lt;'a, TPeer, TConn, TPending, TSub, TPendingSub&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPending: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPendingSub: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TSub: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TPeer&gt; RefUnwindSafe for Config&lt;TPeer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OverlayNetwork","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TPeer, TConn&gt; !RefUnwindSafe for Network&lt;TNow, TPeer, TConn&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartConnect","synthetic":true,"types":[]},{"text":"impl&lt;TConn&gt; RefUnwindSafe for Event&lt;TConn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TConn: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TNow&gt; !RefUnwindSafe for ReadWrite&lt;TNow&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectionReadyFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; !RefUnwindSafe for SubstreamOpen&lt;'a, TNow, TPeer, TConn&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueNotificationError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StorageMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StorageEntryMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StorageEntryTypeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageHasher","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionArgumentMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EventMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleConstantMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ErrorMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExtrinsicMetadataRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecodeError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for UndecodedIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BlockAnnouncesHandshakeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BlockAnnounceRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecodeBlockAnnounceError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BlockAnnouncesHandshakeDecodeError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestConfigStart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeBlockResponseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GrandpaNotificationRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VoteMessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnsignedPrevoteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnsignedPrecommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrimaryProposeRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CommitMessageRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CompactCommitRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeighborPacket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CatchUpRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CatchUpRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrevoteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecodeGrandpaNotificationError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaWarpSyncResponseFragment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeGrandpaWarpSyncResponseError","synthetic":true,"types":[]},{"text":"impl&lt;TKeysIter&gt; RefUnwindSafe for StorageProofRequestConfig&lt;TKeysIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKeysIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeStorageProofResponseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufDecodeError","synthetic":true,"types":[]},{"text":"impl&lt;TPeer&gt; RefUnwindSafe for Config&lt;TPeer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPeer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionId","synthetic":true,"types":[]},{"text":"impl&lt;TNow, TPeer, TConn&gt; !RefUnwindSafe for ChainNetwork&lt;TNow, TPeer, TConn&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartConnect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodedBlockAnnounceHandshake","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodedBlockAnnounce","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; !RefUnwindSafe for DiscoveryInsert&lt;'a, TNow, TPeer, TConn&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TNow&gt; !RefUnwindSafe for ReadWrite&lt;TNow&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TNow, TPeer, TConn&gt; !RefUnwindSafe for SubstreamOpen&lt;'a, TNow, TPeer, TConn&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DiscoveryError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlocksRequestError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageProofRequestError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaWarpSyncRequestError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nibble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NibbleFromU8Error","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for BytesToNibbles&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CalculationCache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RootMerkleValueCalculation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllKeys","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageValue","synthetic":true,"types":[]},{"text":"impl&lt;TChIter, TPKey, TVal&gt; RefUnwindSafe for Config&lt;TChIter, TPKey, TVal&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TChIter: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TPKey: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TVal: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TPKey&gt; RefUnwindSafe for NodeTy&lt;TPKey&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TPKey: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for Config&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;TUd&gt; RefUnwindSafe for TrieStructure&lt;TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd, TKIter&gt; RefUnwindSafe for Entry&lt;'a, TUd, TKIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKIter: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for NodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for StorageNodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for Remove&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for BranchNodeAccess&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd, TKIter&gt; RefUnwindSafe for Vacant&lt;'a, TUd, TKIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TKIter: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for PrepareInsert&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for PrepareInsertOne&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TUd&gt; RefUnwindSafe for PrepareInsertTwo&lt;'a, TUd&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TUd: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trie","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAuthList&gt; RefUnwindSafe for VerifyConfig&lt;'a, TAuthList&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAuthList: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifySuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VerifyConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifySuccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBody&gt; !RefUnwindSafe for Config&lt;'a, TBody&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ConfigConsensus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Success","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuccessConsensus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Verify","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageGet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StoragePrefixKeys","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageNextKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeCompilation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ConfigConsensus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Success","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["smoldot_js"] = [{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebSocket","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()